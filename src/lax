import { useState } from 'react';
import {
  DndContext,
  closestCenter,
  KeyboardSensor,
  PointerSensor,
  useSensor,
  useSensors,
  useDroppable,
} from '@dnd-kit/core';
import {
  arrayMove,
  SortableContext,
  sortableKeyboardCoordinates,
  verticalListSortingStrategy,
} from '@dnd-kit/sortable';
import { SortableItem } from './SortableItem';
import Column from './assets/components/Column';

function App() {
  const [activeId, setActiveId] = useState(null);
  const [box1, setBox1] = useState([
    { id: '1', title: 'Task 1', category: 'A' },
    { id: '2', title: 'Task 2', category: 'A' },
    { id: '3', title: 'Task 3', category: 'A' },
  ]);
  const [box2, setBox2] = useState([
    // "meow",
    { id: '4', title: 'Task 4',category: 'B' },
    { id: '5', title: 'Task 5',category: 'B' },
  ]);

  const sensors = useSensors(
    useSensor(PointerSensor),
    useSensor(KeyboardSensor, {
      coordinateGetter: sortableKeyboardCoordinates,
    })
  );

  function handleDragEnd(event) {
    const { active, over } = event;
    if (!over) return;
    console.log("Over",over)

    setActiveId(null);
  }

  function handleDragStart(event) {
    const {active} = event;
    
    setActiveId(active.id);
  }

  function handleDragOver(event) {
    const { over } = event;
    console.log("Over in over",over)
    if (!over) return;
    if(over.id === '4'){
      console.log("Box2")
      //remove from box1 and add to box2
      const activeIndex = box1.findIndex((item) => item.id === activeId);
      const overIndex = box2.findIndex((item) => item.id === over.id);
      const item = box1[activeIndex];
      console.log("Item",item)
      setBox1((items) => {
        const nextState = [...items];
        nextState.splice(activeIndex, 1);
        return nextState;
      });
      setBox2((items) => {
        const nextState = [...items];
        nextState.splice(overIndex, 0, item);
        return nextState;
      });

    }
    
 
  }

  return (
    <div className="flex justify-center space-x-8 p-8">
      <DndContext
        sensors={sensors}
        collisionDetection={closestCenter}
        onDragEnd={handleDragEnd}
        onDragStart={handleDragStart}
        onDragOver={handleDragOver}
      >
        {/* Box 1 */}
        <div className="w-1/2 bg-gray-600 p-4 rounded-lg">
          <h2 className="text-lg font-bold mb-4 text-white">Box 1</h2>
          <SortableContext
            items={box1}
            strategy={verticalListSortingStrategy}
          >
            {box1.map((item) => (
              <SortableItem key={item.id} id={item.id} title={item.title} />
            ))}
          </SortableContext>
        </div>

        {/* Box 2 */}
        <SortableContext
          items={box2}
          strategy={verticalListSortingStrategy}
        >
          <Column id={"box2id"} box={box2}/>
        </SortableContext>

      </DndContext>
    </div>
  );
}

export default App;